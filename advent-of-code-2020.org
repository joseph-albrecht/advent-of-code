
* Day 1

** part 1
#+begin_src python :results output
  import itertools
  data = open("./inputs/2020-Day1", 'r').read().split("\n")

  numbers = []
  for line in data:
      numbers.append(int(line))

  combinations = itertools.combinations(numbers, 2)

  for x, y in combinations:
      if x + y == 2020:
          print(x*y)
#+end_src

#+RESULTS:
: 436404

** part 2

#+begin_src python :results output
  import itertools
  data = open("./inputs/2020-Day1", 'r').read().split("\n")

  numbers = []
  for line in data:
      numbers.append(int(line))

  combinations = itertools.combinations(numbers, 3)

  for x, y, z in combinations:
      if x + y + z == 2020:
          print(x*y*z)
#+end_src

#+RESULTS:
: 274879808

* Day 2
** part 1
#+begin_src python :results output
  data = open("inputs/2020-Day2", 'r').read().split("\n")

  count = 0
  for line in data:
      min_max, letter, passw = line.split(" ")
      lo, hi = [int(x) for x in min_max.split("-")]
      letter = letter[0:1]

      if passw.count(letter) >= lo and passw.count(letter) <= hi:
          count += 1

  print(count)
#+end_src

#+RESULTS:
: 398

** part 2
#+begin_src python :results output
  data = open("inputs/2020-Day2", 'r').read().split("\n")

  count = 0
  for line in data:
      min_max, letter, passw = line.split(" ")
      lo, hi = [int(x) for x in min_max.split("-")]
      letter = letter[0:1]
      matches = 0

      if passw[lo-1] == letter:
          matches += 1

      if passw[hi-1] == letter:
          matches += 1

      if matches == 1:
          count += 1

  print(count)
#+end_src

#+RESULTS:
: 562

* Day 3
** part 1
#+begin_src python :results output
data = open("./inputs/2020-Day3", 'r').read().splitlines()

counter = 0
for row, trees in enumerate(data):
    tile = trees[(3 * row) % len(trees)]
    if tile == "#":
        counter += 1

print(counter)
#+end_src

#+RESULTS:
: 242

** part 2
#+begin_src python :results output
import functools
data = open("./inputs/2020-Day3", 'r').read().splitlines()

overs = [1, 3, 5, 7, 1]
counter = [0, 0, 0, 0, 0]
for row, trees in enumerate(data):
    for num, over in enumerate(overs[:-1]):
        tile = trees[(over * row) % len(trees)]
        if tile == "#":
            counter[num] += 1

for row, trees in enumerate(data[0::2]):
    over = 1
    tile = trees[(over * row) % len(trees)]
    if tile == "#":
        counter[4] += 1

print(counter)
print(functools.reduce(lambda x, y: x*y, counter))
#+end_src

#+RESULTS:
: [82, 242, 71, 67, 24]
: 2265549792

* Day 4
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day4", 'r').read().split("\n\n")
  import re

  needed_fields = [
      "byr",
      "iyr",
      "eyr",
      "hgt",
      "hcl",
      "ecl",
      "pid",]
  passports = []
  for section in data:
      passport = {}
      for line in section.split("\n"):
          pairs = line.split(" ")
          for pair in pairs:
              key, value = pair.split(":")
              passport[key] = value
      passports.append(passport)

  count = 0
  for passport in passports:
      valid = True
      for field in needed_fields:
          if field not in passport:
              valid = False

      if valid:
          count += 1
        
  print(count)
#+end_src

#+RESULTS:
: 260

** part 2
#+begin_src python :results output
data = open("./inputs/2020-Day4", 'r').read().split("\n\n")
import re

def height(x):
    if x[-2:] == "cm":
        return int(x[:-2]) >= 150 and int(x[:-2]) <= 193
    elif x[-2:] == "in":
        return int(x[:-2]) >= 59 and int(x[:-2]) <= 76
    return False

needed_fields = {
    "byr": lambda x: re.compile('[0-9]{4}').match(x) and int(x) >= 1920 and int(x) <= 2002,
    "iyr": lambda x: re.compile('[0-9]{4}').match(x) and int(x) >= 2010 and int(x) <= 2020,
    "eyr": lambda x: re.compile('[0-9]{4}').match(x) and int(x) >= 2020 and int(x) <= 2030,
    "hgt": height,
    "hcl": lambda x: re.compile('^#[0-9a-f]{6}$').match(x),
    "ecl": lambda x: x in ["amb", "blu", "brn", "gry", "grn", "hzl", "oth"],
    "pid": lambda x: re.compile('^[0-9]{9}$').match(x),}
passports = []
for section in data:
    passport = {}
    for line in section.split("\n"):
        pairs = line.split(" ")
        for pair in pairs:
            key, value = pair.split(":")
            passport[key] = value
    passports.append(passport)
count = 0
for passport in passports:
    valid = True
    for field in needed_fields:
        test = needed_fields[field]
        if field not in passport or not test(passport[field]):
            valid = False

    if valid:
        count += 1
        
print(count)
#+end_src

#+RESULTS:
: 153

* Day 5
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day5", 'r').read().split("\n")

  mapper = {'F': '0', 'B':'1', 'R':'1', 'L':'0'}

  def convert(value, amap):
      result = ''
      for char in value:
          result += amap[char]
      return int(result, 2)

  passes = []
  for line in data:
      row = convert(line[:7], mapper)
      col = convert(line[-3:], mapper)
      pass_id = row * 8 + col
      passes.append(pass_id)

  print(max(passes))
#+end_src

#+RESULTS:
: 828

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day5", 'r').read().split("\n")

  mapper = {'F': '0', 'B':'1', 'R':'1', 'L':'0'}

  def convert(value, amap):
      result = ''
      for char in value:
          result += amap[char]
      return int(result, 2)

  passes = {}
  for line in data:
      row = convert(line[:7], mapper)
      col = convert(line[-3:], mapper)

      if row not in passes:
          passes[row] = []

      pass_id = row * 8 + col
      passes[row].append((row, col, line, pass_id))

  for row in passes:
      if len(passes[row]) < 8:
          print(sorted(passes[row]))
#+end_src

#+RESULTS:
: [(2, 7, 'FFFFFBFRRR', 23)]
: [(70, 0, 'BFFFBBFLLL', 560), (70, 1, 'BFFFBBFLLR', 561), (70, 2, 'BFFFBBFLRL', 562), (70, 3, 'BFFFBBFLRR', 563), (70, 4, 'BFFFBBFRLL', 564), (70, 6, 'BFFFBBFRRL', 566), (70, 7, 'BFFFBBFRRR', 567)]
: [(103, 0, 'BBFFBBBLLL', 824), (103, 1, 'BBFFBBBLLR', 825), (103, 2, 'BBFFBBBLRL', 826), (103, 3, 'BBFFBBBLRR', 827), (103, 4, 'BBFFBBBRLL', 828)]

* Day 6
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day6", 'r').read().split("\n\n")

  count = 0
  for section in data:
      answers = set()
      for line in section.split("\n"):
          for char in line:
              answers.add(char)

      count += len(answers)

  print(count)
#+end_src

#+RESULTS:
: 6170

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day6", 'r').read().split("\n\n")

  count = 0
  for section in data:
      all_answered = set()
      lines = section.split("\n")
      for num, line in enumerate(lines):
          passenger = set()
          for char in line.strip():
              passenger.add(char)
          if num is 0:
              all_answered = passenger
          else:
              all_answered = all_answered.intersection(passenger)

      count += len(all_answered)

  print(count)
#+end_src

#+RESULTS:
: 2947
