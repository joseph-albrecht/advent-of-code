#+TITLE: Advent of Code 2015

* Day 1
** part 1
Santa was hoping for a white Christmas, but his weather machine's
"snow" function is powered by stars, and he's fresh out! To save
Christmas, he needs you to collect fifty stars by December 25th.

Collect stars by helping Santa solve puzzles. Two puzzles will be made
available on each day in the Advent calendar; the second puzzle is
unlocked when you complete the first. Each puzzle grants one
star. Good luck!

Here's an easy puzzle to warm you up.

Santa is trying to deliver presents in a large apartment building, but
he can't find the right floor - the directions he got are a little
confusing. He starts on the ground floor (floor 0) and then follows
the instructions one character at a time.

An opening parenthesis, (, means he should go up one floor, and a
closing parenthesis, ), means he should go down one floor.

The apartment building is very tall, and the basement is very deep; he
will never find the top or bottom floors.

For example:
#+begin_quote
(()) and ()() both result in floor 0.
((( and (()(()( both result in floor 3.
))((((( also results in floor 3.
()) and ))( both result in floor -1 (the first basement level).
))) and )())()) both result in floor -3.
#+end_quote

To what floor do the instructions take Santa?

#+begin_src python :results output
  instructions = open("inputs/2015-Day1", 'r').read()
  floor = 0
  for char in instructions:
      if char == '(':
          floor += 1
      elif char == ')':
          floor -= 1

  print(floor)
#+end_src

#+RESULTS:
: 138

** part 2
Now, given the same instructions, find the position of the first
character that causes him to enter the basement (floor -1). The first
character in the instructions has position 1, the second character has
position 2, and so on.

For example:
#+begin_quote
) causes him to enter the basement at character position 1.
()()) causes him to enter the basement at character position 5.
#+end_quote

What is the position of the character that causes Santa to first enter
the basement?

#+begin_src python :results output
  instructions = open("inputs/2015-Day1", 'r').read()
  floor = 0
  for step, char in enumerate(instructions):
      if char == '(':
          floor += 1
      elif char == ')':
          floor -= 1

      if floor < 0:
          print(step + 1)
          break
#+end_src

#+RESULTS:
: 1771
* Day 2
** part 1
The elves are running low on wrapping paper, and so they need to
submit an order for more. They have a list of the dimensions (length
l, width w, and height h) of each present, and only want to order
exactly as much as they need.

Fortunately, every present is a box (a perfect right rectangular
prism), which makes calculating the required wrapping paper for each
gift a little easier: find the surface area of the box, which is
2*l*w + 2*w*h + 2*h*l. The elves also need a little extra paper for
each present: the area of the smallest side.

For example:
#+begin_quote
A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52 square
feet of wrapping paper plus 6 square feet of slack, for a total of 58
square feet.  A present with dimensions 1x1x10 requires 2*1 + 2*10 +
2*10 = 42 square feet of wrapping paper plus 1 square foot of slack,
for a total of 43 square feet.  All numbers in the elves' list are in
feet.
#+end_quote

How many total square feet of wrapping paper should they order?

#+begin_src python :results output
  sizes = open("inputs/2015-Day2", 'r').read().split('\n')

  total_paper = 0
  for size in sizes:
      l, w, h = map(lambda x: int(x), size.split('x'))
      lp = 2*l*w
      lw = 2*w*h
      lh = 2*h*l

      paper = lp + lw + lh + sorted([l*w, w*h, h*l])[0]
      total_paper += paper

  print(total_paper)
#+end_src

#+RESULTS:
: 1598415

** part 2
The elves are also running low on ribbon. Ribbon is all the same
width, so they only have to worry about the length they need to order,
which they would again like to be exact.

The ribbon required to wrap a present is the shortest distance around
its sides, or the smallest perimeter of any one face. Each present
also requires a bow made out of ribbon as well; the feet of ribbon
required for the perfect bow is equal to the cubic feet of volume of
the present. Don't ask how they tie the bow, though; they'll never
tell.

For example:
#+begin_quote
A present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon
to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for a
total of 34 feet.  A present with dimensions 1x1x10 requires 1+1+1+1 =
4 feet of ribbon to wrap the present plus 1*1*10 = 10 feet of ribbon
for the bow, for a total of 14 feet.
#+end_quote

How many total feet of ribbon should they order?

#+begin_src python :results output
  sizes = open("inputs/2015-Day2", 'r').read().split('\n')
  total_ribbon = 0
  for size in sizes:
      l, w, h = map(lambda x: int(x), size.split('x'))
      lp = l+l+w+w
      lw = w+w+h+h
      lh = h+h+l+l

      v = l*w*h
      ribbon = v + sorted([lp, lw, lh])[0]
      total_ribbon += ribbon

  print(total_ribbon)
#+end_src

#+RESULTS:
: 3812909

* Day 3
** part 1
Santa is delivering presents to an infinite two-dimensional grid of
houses.

He begins by delivering a present to the house at his starting
location, and then an elf at the North Pole calls him via radio and
tells him where to move next. Moves are always exactly one house to
the north (^), south (v), east (>), or west (<). After each move, he
delivers another present to the house at his new location.

However, the elf back at the north pole has had a little too much
eggnog, and so his directions are a little off, and Santa ends up
visiting some houses more than once. How many houses receive at least
one present?

For example:
#+begin_quote
> delivers presents to 2 houses: one at the starting location, and one
to the east.

^>v< delivers presents to 4 houses in a square, including twice to the
house at his starting/ending location.

^v^v^v^v^v delivers a bunch of presents to some very lucky children at
only 2 houses.
#+end_quote
#+begin_src python :results output
  moves = open("inputs/2015-Day3", 'r').read()
  x, y = 0, 0
  visits = [(x, y)]
  for move in moves:
      if move == '^':
          x += 1
      elif move == 'v':
          x -= 1
      elif move == '>':
          y += 1
      elif move == '<':
          y -= 1

      if not (x, y) in visits:
          visits.append((x, y))

  print(len(visits))
#+end_src

#+RESULTS:
: 2565
