
* Day 1

** part 1
#+begin_src python :results output
  import itertools
  data = open("./inputs/2020-Day1", 'r').read().split("\n")

  numbers = []
  for line in data:
      numbers.append(int(line))

  combinations = itertools.combinations(numbers, 2)

  for x, y in combinations:
      if x + y == 2020:
          print(x*y)
#+end_src

#+RESULTS:
: 436404

** part 2

#+begin_src python :results output
  import itertools
  data = open("./inputs/2020-Day1", 'r').read().split("\n")

  numbers = []
  for line in data:
      numbers.append(int(line))

  combinations = itertools.combinations(numbers, 3)

  for x, y, z in combinations:
      if x + y + z == 2020:
          print(x*y*z)
#+end_src

#+RESULTS:
: 274879808

* Day 2
** part 1
#+begin_src python :results output
  data = open("inputs/2020-Day2", 'r').read().split("\n")

  count = 0
  for line in data:
      min_max, letter, passw = line.split(" ")
      start, end = [int(x) for x in min_max.split("-")]
      letter = letter[0:1]

      if passw.count(letter) >= start and passw.count(letter) <= end:
          count += 1

  print(count)
#+end_src

#+RESULTS:
: 398

** part 2
#+begin_src python :results output
  data = open("inputs/2020-Day2", 'r').read().split("\n")

  count = 0
  for line in data:
      min_max, letter, passw = line.split(" ")
      start, end = [int(x) for x in min_max.split("-")]
      letter = letter[0:1]
      matches = 0

      if passw[lo-1] == letter:
          matches += 1

      if passw[hi-1] == letter:
          matches += 1

      if matches == 1:
          count += 1

  print(count)
#+end_src

#+RESULTS:
: 562

* Day 3
** part 1
#+begin_src python :results output
data = open("./inputs/2020-Day3", 'r').read().splitlines()

counter = 0
for row, trees in enumerate(data):
    tile = trees[(3 * row) % len(trees)]
    if tile == "#":
        counter += 1

print(counter)
#+end_src

#+RESULTS:
: 242

** part 2
#+begin_src python :results output
import functools
data = open("./inputs/2020-Day3", 'r').read().splitlines()

overs = [1, 3, 5, 7, 1]
counter = [0, 0, 0, 0, 0]
for row, trees in enumerate(data):
    for num, over in enumerate(overs[:-1]):
        tile = trees[(over * row) % len(trees)]
        if tile == "#":
            counter[num] += 1

for row, trees in enumerate(data[0::2]):
    over = 1
    tile = trees[(over * row) % len(trees)]
    if tile == "#":
        counter[4] += 1

print(counter)
print(functools.reduce(lambda x, y: x*y, counter))
#+end_src

#+RESULTS:
: [82, 242, 71, 67, 24]
: 2265549792

* Day 4
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day4", 'r').read().split("\n\n")
  import re

  needed_fields = [
      "byr",
      "iyr",
      "eyr",
      "hgt",
      "hcl",
      "ecl",
      "pid",]
  passports = []
  for section in data:
      passport = {}
      for line in section.split("\n"):
          pairs = line.split(" ")
          for pair in pairs:
              key, value = pair.split(":")
              passport[key] = value
      passports.append(passport)

  count = 0
  for passport in passports:
      valid = True
      for field in needed_fields:
          if field not in passport:
              valid = False

      if valid:
          count += 1
        
  print(count)
#+end_src

#+RESULTS:
: 260

** part 2
#+begin_src python :results output
data = open("./inputs/2020-Day4", 'r').read().split("\n\n")
import re

def height(x):
    if x[-2:] == "cm":
        return int(x[:-2]) >= 150 and int(x[:-2]) <= 193
    elif x[-2:] == "in":
        return int(x[:-2]) >= 59 and int(x[:-2]) <= 76
    return False

needed_fields = {
    "byr": lambda x: re.compile('[0-9]{4}').match(x) and int(x) >= 1920 and int(x) <= 2002,
    "iyr": lambda x: re.compile('[0-9]{4}').match(x) and int(x) >= 2010 and int(x) <= 2020,
    "eyr": lambda x: re.compile('[0-9]{4}').match(x) and int(x) >= 2020 and int(x) <= 2030,
    "hgt": height,
    "hcl": lambda x: re.compile('^#[0-9a-f]{6}$').match(x),
    "ecl": lambda x: x in ["amb", "blu", "brn", "gry", "grn", "hzl", "oth"],
    "pid": lambda x: re.compile('^[0-9]{9}$').match(x),}
passports = []
for section in data:
    passport = {}
    for line in section.split("\n"):
        pairs = line.split(" ")
        for pair in pairs:
            key, value = pair.split(":")
            passport[key] = value
    passports.append(passport)
count = 0
for passport in passports:
    valid = True
    for field in needed_fields:
        test = needed_fields[field]
        if field not in passport or not test(passport[field]):
            valid = False

    if valid:
        count += 1
        
print(count)
#+end_src

#+RESULTS:
: 153

* Day 5
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day5", 'r').read().split("\n")

  mapper = {'F': '0', 'B':'1', 'R':'1', 'L':'0'}

  def convert(value, amap):
      result = ''
      for char in value:
          result += amap[char]
      return int(result, 2)

  passes = []
  for line in data:
      row = convert(line[:7], mapper)
      col = convert(line[-3:], mapper)
      pass_id = row * 8 + col
      passes.append(pass_id)

  print(max(passes))
#+end_src

#+RESULTS:
: 828

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day5", 'r').read().split("\n")

  mapper = {'F': '0', 'B':'1', 'R':'1', 'L':'0'}

  def convert(value, amap):
      result = ''
      for char in value:
          result += amap[char]
      return int(result, 2)

  passes = {}
  for line in data:
      row = convert(line[:7], mapper)
      col = convert(line[-3:], mapper)

      if row not in passes:
          passes[row] = []

      pass_id = row * 8 + col
      passes[row].append((row, col, line, pass_id))

  for row in passes:
      if len(passes[row]) < 8:
          print(sorted(passes[row]))
#+end_src

#+RESULTS:
: [(2, 7, 'FFFFFBFRRR', 23)]
: [(70, 0, 'BFFFBBFLLL', 560), (70, 1, 'BFFFBBFLLR', 561), (70, 2, 'BFFFBBFLRL', 562), (70, 3, 'BFFFBBFLRR', 563), (70, 4, 'BFFFBBFRLL', 564), (70, 6, 'BFFFBBFRRL', 566), (70, 7, 'BFFFBBFRRR', 567)]
: [(103, 0, 'BBFFBBBLLL', 824), (103, 1, 'BBFFBBBLLR', 825), (103, 2, 'BBFFBBBLRL', 826), (103, 3, 'BBFFBBBLRR', 827), (103, 4, 'BBFFBBBRLL', 828)]

* Day 6
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day6", 'r').read().split("\n\n")

  count = 0
  for section in data:
      answers = set()
      for line in section.split("\n"):
          for char in line:
              answers.add(char)

      count += len(answers)

  print(count)
#+end_src

#+RESULTS:
: 6170

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day6", 'r').read().split("\n\n")

  count = 0
  for section in data:
      all_answered = set()
      lines = section.split("\n")
      for num, line in enumerate(lines):
          passenger = set()
          for char in line.strip():
              passenger.add(char)
          if num is 0:
              all_answered = passenger
          else:
              all_answered = all_answered.intersection(passenger)

      count += len(all_answered)

  print(count)
#+end_src

#+RESULTS:
: 2947

* Day 7
** part 1
#+begin_src python :results output
  from functools import lru_cache
  data = open("./inputs/2020-Day7", 'r').read().split("\n")

  bag_contents = {}
  for line in data:
      bag, contents = line[:-1].split(" contain ")
      bag = bag.split(" ")
      bag = bag[0] + bag[1]
      content_bags = contents.split(", ")
      inner_bags = []
      for content in content_bags:
          bag_parts = content.split(" ")
          try:
              num = int(bag_parts[0])
              bag_type = bag_parts[1] + bag_parts[2]
              inner_bags.append(bag_type)
          except:
              continue

      bag_contents[bag] = inner_bags

  def bags_inside(target):
      bags = []
      for bag, contents in bag_contents.items():
          if target in contents:
              bags.append(bag)
      return set(bags)

  searched = set()
  found = bags_inside("shinygold")

  while found.difference(searched):
      for bag in found.difference(searched):
          found = found.union(bags_inside(bag))
          searched.add(bag)
            
  print(len(found))
#+end_src

#+RESULTS:
: 257

** part 2
#+begin_src python :results output
data = open("./inputs/2020-Day7", 'r').read().split("\n")

bag_contents = {}
bag_number = {}
for line in data:
    bag, contents = line[:-1].split(" contain ")
    bag = bag.split(" ")
    bag = bag[0] + bag[1]
    content_bags = contents.split(", ")
    inner_bags = []
    for content in content_bags:
        bag_parts = content.split(" ")
        try:
            num = int(bag_parts[0])
            bag_type = bag_parts[1] + bag_parts[2]
            inner_bags.append(bag_type)
            bag_number[(bag, bag_type)] = num
        except:
            continue

    bag_contents[bag] = inner_bags

def bags_inside(target):
    number = 1
    if target in bag_contents and len(bag_contents[target]) > 0:
        for bag in bag_contents[target]:
                number += bag_number[(target, bag)] * bags_inside(bag)
    return number

print(bags_inside("shinygold") - 1)
#+end_src

#+RESULTS:
: 1038

* Day 8
** part 1
#+begin_src python :results output
data = open("./inputs/2020-Day8", 'r').read().split("\n")

code = []
nop_jmp = []

for line in data:
    op, arg = line.split(" ")
    code.append((op, arg))

def run_gameboy():
    pos = 0
    acc = 0
    run = set()

    while pos not in run:
        run.add(pos)
        op, arg = code[pos]
        if op == "acc":
            acc += int(arg)
        elif op == "jmp":
            pos += int(arg)
            last_jump = pos
            continue

        pos += 1
    return acc

print(run_gameboy())

#+end_src

#+RESULTS:
: 1451

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day8", 'r').read().split("\n")

  code = []
  nop_jmp = []

  for line in data:
      op, arg = line.split(" ")
      code.append((op, arg))

  def run_gameboy(add=False, swap=None):
      pos = 0
      acc = 0
      run = set()

      while pos not in run:
          run.add(pos)
          if pos >= len(code):
              print(acc)
              return True
          op = None
          arg = None
          if pos < len(code):
              op, arg = code[pos]
          else:
              break
          if pos == swap and op == "jmp":
              op = "nop"
          elif pos == swap and op == "nop":
              op = "jmp"
        
          if op == "acc":
              acc += int(arg)
          elif op == "jmp":
              if add:
                  nop_jmp.append((pos, op))
              pos += int(arg)
              last_jump = pos
              continue
          elif op == "nop":
              if add:
                  nop_jmp.append((pos, op))
              last_nop = pos

          pos += 1
      return False

  run_gameboy(True)

  while nop_jmp:
      pos, op = nop_jmp.pop()
      output = run_gameboy(False, pos)
#+end_src

#+RESULTS:
: 1160

* Day 9
** part 1
#+begin_src python :results output
  import itertools 
  data = open("./inputs/2020-Day9", 'r').read().split("\n")

  numbers = [int(line) for line in data]

  def sum_function(num, pre):
      combos = itertools.combinations(pre, 2)

      for combo in combos:
          if sum(combo) == num:
              return True

      return False

  for i, number in enumerate(numbers):
      if  i >= 25 and not sum_function(number, numbers[i-25:i]):
          print(number)
#+end_src

#+RESULTS:
: 1721308972

** part 2
#+begin_src python :results output
  import itertools 
  data = open("./inputs/2020-Day9", 'r').read().split("\n")
  numbers = [int(line) for line in data]
  target = 1721308972
  start, end = 0, 0

  while True:
      num_list = numbers[start:end]
      the_sum = sum(num_list)
      if the_sum == target:
          print(min(num_list) + max(num_list))
          break

      elif the_sum > target:
          start += 1
      elif the_sum < target:
          end += 1
#+end_src

#+RESULTS:
: 209694133

* Day 10
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day10", 'r').read().split("\n")

  jolts = [int(x) for x in data]
  jolts = sorted(jolts)

  differences = {1:0, 2:0, 3:0}
  current_jolt = 0
  for jolt in jolts:
      difference = jolt - current_jolt
      differences[difference] += 1
      current_jolt = jolt

  differences[3] += 1 #connection to device
  print(differences[3] * differences[1])
#+end_src

#+RESULTS:
: 2664

** part 2
#+begin_src python :results output
  from functools import lru_cache
  data = open("./inputs/2020-Day10", 'r').read().split("\n")

  jolts = [int(x) for x in data]
  jolts = sorted(jolts)
  jolts.append(jolts[-1] + 3)
  jolts = [0,] + jolts
  jolts = tuple(jolts)

  @lru_cache(None)
  def make_connection_list(jolts,):
      if len(jolts) == 1:
          return [jolts,]

      ways = tuple()
      current_jolt = jolts[0]
      end = min(4, len(jolts))
      for i, jolt in enumerate(jolts[1:end]):
          if jolt - current_jolt <= 3:
              more_ways = make_connection_list(jolts[i+1:])
              ways += tuple([(current_jolt,) + way for way in more_ways])

      return ways

  def calculate_connection_paths(jolts):
      ways = 1
      bridges = []

      bridges = [i for i, num in enumerate(jolts[1:]) if jolts[i] - jolts[i-1] == 3]
      bridges = [0,] + bridges
      if bridges[-1] is not len(jolts) - 1:
          bridges.append(len(jolts)-1)

      for start, end in zip(bridges[:-1], bridges[1:]):
          next_ways = 0
          more_ways = make_connection_list(jolts[start:end])
          ways = ways * len(more_ways)

      return ways

  ways = calculate_connection_paths(jolts)
  print(ways)
#+end_src

#+RESULTS:
: 148098383347712


* Day 11
** part 1
#+begin_src python :results output
data = open("./inputs/2020-Day11", 'r').read().split("\n")

seating = []
for line in data:
    row = [char for char in line]
    seating.append(row)

def number_adjacent(row, col, seating):
    num = 0
    if row > 0 and col > 0 and seating[row-1][col-1] == "#":
        num += 1
    if row > 0 and seating[row-1][col] == "#":
        num += 1
    if row > 0 and col < len(seating[0]) - 1 and seating[row-1][col+1] == "#":
        num += 1
    if col > 0 and seating[row][col-1] == "#":
        num += 1
    if col < len(seating[0]) - 1 and seating[row][col+1] == "#":
        num += 1
    if row < len(seating) - 1 and col > 0 and seating[row+1][col-1] == "#":
        num += 1
    if row < len(seating) - 1 and seating[row+1][col] == "#":
        num += 1
    if row < len(seating) - 1 and col < len(seating[0]) - 1 and seating[row+1][col+1] == "#":
        num += 1

    return num
    
def next(seating):
    new_layout = []
    for i, row in enumerate(seating):
        new_row = []
        for j, seat in enumerate(row):
            adjacencies = number_adjacent(i, j, seating)
            if seat == "#" and adjacencies >= 4:
                new_row.append("L")
            elif seat == "L" and adjacencies == 0:
                new_row.append("#")
            else:
                new_row.append(seat)

        new_layout.append(new_row)
    return new_layout

while True:
    next_seating = next(seating)
    if next_seating == seating:
        break
    else:
        seating = next_seating

count = 0
for row in seating:
    for seat in row:
        if seat == "#":
            count += 1
print(count)
#+end_src

#+RESULTS:
: 2263

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day11", 'r').read().split("\n")

  seating = []
  for line in data:
      row = [char for char in line]
      seating.append(row)

  def look_towards(row, col, delx, dely, seating):
      x, y = row + delx, col + dely
      while len(seating) > x >= 0 and len(seating[0]) > y >= 0:
          if seating[x][y] == "#":
              return 1
          elif seating[x][y] == "L":
              return 0
          x = x + delx
          y = y + dely

      return 0

  def number_adjacent(row, col, seating):
      num = 0
      num += look_towards(row, col, -1, -1, seating)
      num += look_towards(row, col, -1,  0, seating)
      num += look_towards(row, col, -1,  1, seating)
      num += look_towards(row, col,  0, -1, seating)
      num += look_towards(row, col,  0,  1, seating)
      num += look_towards(row, col,  1, -1, seating)
      num += look_towards(row, col,  1,  0, seating)
      num += look_towards(row, col,  1,  1, seating)

      return num

  def next(seating):
      new_layout = []
      for i, row in enumerate(seating):
          new_row = []
          for j, seat in enumerate(row):
              adjacencies = number_adjacent(i, j, seating)
              if seat == "#" and adjacencies >= 5:
                  new_row.append("L")
              elif seat == "L" and adjacencies == 0:
                  new_row.append("#")
              else:
                  new_row.append(seat)

          new_layout.append(new_row)
      return new_layout

  while True:
      next_seating = next(seating)
      if next_seating == seating:
          break
      else:
          seating = next_seating

  count = 0
  for row in seating:
      for seat in row:
          if seat == "#":
              count += 1

  print(count)
#+end_src

#+RESULTS:
: 2002

* Day 12
** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day12", 'r').read().split("\n")

  actions = []
  for line in data:
      dir = line[0]
      dist = int(line[1:])
      actions.append((dir, dist))

  directions = ["E", "S", "W", "N"]
  direction = "E"
  x,y = 0,0
  vectors = {"N":(0,1), "S":(0,-1), "E":(1,0), "W":(-1,0)}

  for dir, dist in actions:
      if dir in vectors:
          dx, dy = vectors[dir]
          for i in range(dist):
              x += dx
              y += dy
      if dir == "F":
          dx, dy = vectors[direction]
          for i in range(dist):
              x += dx
              y += dy
      if dir == "R":
          direction = directions[(directions.index(direction) + dist // 90) % 4]
      if dir == "L":
          direction = directions[(directions.index(direction) - dist // 90) % 4]

  print(abs(x) + abs(y))
#+end_src

#+RESULTS:
: 1032

** part 2
#+begin_src python :results output
  data = open("./inputs/2020-Day12", 'r').read().split("\n")

  actions = []
  for line in data:
      dir = line[0]
      dist = int(line[1:])
      actions.append((dir, dist))

  wx,wy = 10,1
  x,y = 0,0
  vectors = {"N":(0,1), "S":(0,-1), "E":(1,0), "W":(-1,0)}

  for dir, dist in actions:
      if dir in vectors:
          dx, dy = vectors[dir]
          for i in range(dist):
              wx += dx
              wy += dy
      if dir == "F":
          for i in range(dist):
              x += wx
              y += wy
      if dir == "R":
          rotations = dist // 90
          for r in range(rotations):
              temp = wx
              wx = wy
              wy = -temp
      if dir == "L":
          rotations = dist // 90
          for r in range(rotations):
              temp = wx
              wx = -wy
              wy = temp

  print(abs(x) + abs(y))
#+end_src

#+RESULTS:
: 156735


* Day 13
** part 1
#+begin_src python :results output
data = open("./inputs/2020-Day13",'r').read().split("\n")

dt = int(data[0])
bts = [int(x) for x in data[1].split(",") if x != "x"]

print(dt)
all_times = {}
bus = None
for t in bts:
    
    time = 0
    while time < dt:
        time += t
    all_times[t] = time

my_bus = 0
earliest = 99999999990
for bus, time in all_times.items():
    if time < earliest:
        earliest = time
        my_bus = bus

print(f"bus: {my_bus} departure: {earliest} arrival: {dt} value: {(earliest - dt) * my_bus}")
    
#+end_src

#+RESULTS:
: 1000001
: bus: 29 departure: 1000007 arrival: 1000001 value: 174

** part 2
#+begin_src python :results output
import functools
data = open("./inputs/2020-Day13",'r').read().split("\n")

schedules = []

for line in data:
    buses = line.split(",")
    schedule = {int(route): offset for offset, route in enumerate(buses) if route != "x"}
    schedules.append(schedule)

def product(numbers):
    return functools.reduce(lambda x, y: x*y, numbers)

def is_multiple(number, divisor):
    return number % divisor == 0

def tempo_route(schedule):
    for route, time in schedule.items():
        if time == 0:
            return route

def find_time(schedule):
    tempo = tempo_route(schedule)
    time = tempo

    while True:
        valid = True
        multiples = []
        for route, offset in schedule.items():
            if is_multiple(time + offset, route):
                multiples.append(route)
            else:
                valid = False
        if valid:
            return time
        else:
            time += product(multiples)

for schedule in schedules:
    winning_time = find_time(schedule)
    print(f"winner: {winning_time}")
#+end_src

#+RESULTS:
: winner: 1000001
: winner: 780601154795940

* Day 14

** part 1
#+begin_src python :results output
  data = open("./inputs/2020-Day14", 'r').read().split("\n")

  memory = {}
  mask = None
  for line in data:
      address = None
      value = None
      if line[:4] == "mask":
          mask = line.split(" ")[-1]
      else:
          address, value = line.split(" = ")
          value = bin(int(value))[2:].zfill(36)
          masked_value = ""
          for char_val, char_mask in zip(value, mask):
              if char_mask == "X":
                  masked_value += char_val
              else:
                  masked_value += char_mask
          memory[address] = masked_value

  total = 0
  for address, value in memory.items():
      total += int(value, 2)

  print(total)
#+end_src

#+RESULTS:
: 12610010960049

** part 2
#+begin_src python :results output
data = open("./inputs/2020-Day14", 'r').read().split("\n")

memory = {}
mask = None
for line in data:
    address = None
    value = None
    if line[:4] == "mask":
        mask = line.split(" ")[-1]
    else:
        address, value = line.split(" = ")
        address = address[4:]
        address = address[:-1]
        address = bin(int(address))[2:].zfill(36)
        value = bin(int(value))[2:].zfill(36)

        new_addresses = [""]
        for i in range(36):
            na = []
            if mask[i] == "1":
                for a in new_addresses:
                    na.append(a + "1")
                new_addresses = na
            elif mask[i] == "0":
                for a in new_addresses:
                    na.append(a + address[i])
                new_addresses = na
            else:
                for a in new_addresses:
                    na.append(a + "1")
                    na.append(a + "0")
                new_addresses = na

        for a in new_addresses:
            memory[a] = value

total = 0
for address, value in memory.items():
    total += int(value, 2)

print(total)
#+end_src

#+RESULTS:
: 3608464522781

* Day 15

** part 1

#+begin_src python :results output
game = [int(num) for num in open("./inputs/2020-Day15", 'r').read().split(",")]

last_number = game[-1]
numbers = {}

def update(number, step):
    if (2, number) in numbers:
        numbers[(1, number)] = numbers[(2, number)]
        numbers[(2, number)] = step
    elif (1, number) in numbers:
        numbers[(2, number)] = step
    else:
        numbers[(1, number)] = step

def difference(number):
    first = None
    second = None
    try:
        first = numbers[(1, number)]
    except:
        pass
    try:
        second = numbers[(2, number)]
    except:
        pass

    if first != None and second != None:
        return second - first
    else:
        return 0

for i, number in enumerate(game):
    update(number, i+1)

game_step = len(game)

while game_step < 2020:
    new_value = difference(last_number)
    update(new_value, game_step + 1)
    game_step += 1
    last_number = new_value

print(last_number)
#+end_src

#+RESULTS:
: 253

** part 2
SO SLOW
#+begin_src python :results output
game = [int(num) for num in open("./inputs/2020-Day15", 'r').read().split(",")]

last_number = game[-1]
numbers = {}

def update(number, step):
    if (2, number) in numbers:
        numbers[(1, number)] = numbers[(2, number)]
        numbers[(2, number)] = step
    elif (1, number) in numbers:
        numbers[(2, number)] = step
    else:
        numbers[(1, number)] = step

def difference(number):
    first = None
    second = None
    try:
        first = numbers[(1, number)]
    except:
        pass
    try:
        second = numbers[(2, number)]
    except:
        pass

    if first != None and second != None:
        return second - first
    else:
        return 0

for i, number in enumerate(game):
    update(number, i+1)

game_step = len(game)

while game_step < 30000000:
    print(game_step)
    new_value = difference(last_number)
    update(new_value, game_step + 1)
    game_step += 1
    last_number = new_value

print(last_number)
#+end_src

* Day 16

** part 1
#+begin_src python :results output
  import functools
  lines = open("./inputs/2020-Day16", 'r').read().split("\n")

  fields = {}
  my_ticket = []
  other_tickets = []
  part = 0
  for line in lines:
      if line == "":
          part += 1
          continue
      if part == 0:
          name, ranges = line.split(": ")
          range_one, range_two = ranges.split(" or ")
          range_one = [int(x) for x in range_one.split("-")]
          range_two = [int(x) for x in range_two.split("-")]
          fields[name] = [range_one, range_two]
      elif part == 1:
          if line[0:4] != "your":
              numbers = [int(x) for x in line.split(",")]
              my_ticket = [int(x) for x in numbers]
      else:
          if line[0:4] != "near":
              numbers = [int(x) for x in line.split(",")]
              other_tickets.append(numbers)

  def check_for_error(ticket):
      errors = []
      for number in ticket:
          valid = False
          for name, constraints in fields.items():
              for lo, hi in constraints:
                  if number >= lo and number <= hi:
                      valid = True

          if not valid:
              errors.append(number)

      return errors

  total_errors = []
  for ticket in other_tickets:
      total_errors += check_for_error(ticket)

  print(sum(total_errors))
#+end_src

#+RESULTS:
: 23036

** part 2
#+begin_src python :results output
  import functools
  lines = open("./inputs/2020-Day16", 'r').read().split("\n")

  fields = {}
  my_ticket = []
  other_tickets = []
  part = 0
  for line in lines:
      if line == "":
          part += 1
          continue
      if part == 0:
          name, ranges = line.split(": ")
          range_one, range_two = ranges.split(" or ")
          range_one = [int(x) for x in range_one.split("-")]
          range_two = [int(x) for x in range_two.split("-")]
          fields[name] = [range_one, range_two]
      elif part == 1:
          if line[0:4] != "your":
              numbers = [int(x) for x in line.split(",")]
              my_ticket = [int(x) for x in numbers]
      else:
          if line[0:4] != "near":
              numbers = [int(x) for x in line.split(",")]
              other_tickets.append(numbers)

  cache = {}
  def check_for_error(ticket):
      if ticket in cache:
          return cache[ticket]

      invalid = False
      for name, constraints in fields.items():
          for lo, hi in constraints:
              if ticket >= lo and ticket <= hi:
                  cache[ticket] = False
                  return False

      cache[ticket] = True
      return True

  def matching_fields(field):
      matching_fields = set()
      for name, constraints in fields.items():
          for lo, hi in constraints:
              if field >= lo and field <= hi:
                  matching_fields.add(name)

      return matching_fields

  good_tickets = []
  for ticket in other_tickets:
      valid = True
      for number in ticket:
          wrong = check_for_error(number)
          if wrong:
              valid = False
              break
      if valid:
          good_tickets.append(ticket)

  potential_fields = [set([name for name in fields]) for _ in fields]
  for ticket in good_tickets:
      for i, number in enumerate(ticket):
          potential_matches = matching_fields(number)
          potential_fields[i] = potential_fields[i].intersection(potential_matches)

  the_fields = {}

  for i in range(len(potential_fields)):
      for i, fields in enumerate(potential_fields):
          if len(fields) == 1:
              the_fields[i] = fields.pop()
              for fields in potential_fields:
                  if the_fields[i] in fields:
                      fields.remove(the_fields[i])
              break

  def product(numbers):
      return functools.reduce(lambda x, y: x*y, numbers)

  print(product([my_ticket[index] for index, field in the_fields.items() if str.startswith(field, "departure")]))
#+end_src

#+RESULTS:
: 1909224687553

* Day 17

** part 1
#+begin_src python :results output
  lines = open("./inputs/2020-Day17", 'r').read().split("\n")

  grid = {}
  for i, line in enumerate(lines):
      z = 0
      y = i
      for x, location in enumerate(line):
          if location == "#":
              grid[(x,y,z)] = "#"
          elif location == ".":
              grid[(x,y,z)] = "."

  def neighbors(x, y, z, grid):
      n = 0
      for i in range(x-1, x+2):
          for j in range(y-1, y+2):
              for k in range(z-1, z+2):
                  if not (x == i and y == j and z == k):
                      if (i,j,k) in grid and grid[(i,j,k)] == "#":
                          n += 1
      return n

  def step(grid):
      numbered_grid = {}
      minx, maxx = 0, 0
      miny, maxy = 0, 0
      minz, maxz = 0, 0
      for x, y, z in grid:
          if x > maxx:
              maxx = x
          if x < minx:
              minx = x
          if y > maxy:
              maxy = y
          if y < miny:
              miny = y
          if z > maxz:
              maxz = z
          if z < minz:
              minz = z
          numbered_grid[(x,y,z)] = neighbors(x,y,z, grid)

      for i in range(minx-1, maxx+2):
          for j in range(miny-1, maxy+2):
              for k in range(minz-1, maxz+2):
                  numbered_grid[(i,j,k)] = neighbors(i,j,k, grid)

      next_grid = {}
      for (x, y, z), n in numbered_grid.items():
          if n in (2, 3) and (x,y,z) in grid and grid[(x,y,z)] == "#":
              next_grid[(x,y,z)] = "#"
          elif n == 3 and ((x,y,z) not in grid or grid[(x,y,z)] == "."):
              next_grid[(x,y,z)] = "#"
          else:
              next_grid[(x,y,z)] = "."

      return next_grid

  for i in range(6):
      grid = step(grid)

  count = 0
  for location in grid:
      if grid[location] == "#":
          count += 1

  print(count)
#+end_src

#+RESULTS:
: 293

** part 2
#+begin_src python :results output
  lines = open("./inputs/2020-Day17", 'r').read().split("\n")

  grid = {}
  for i, line in enumerate(lines):
      z = 0
      y = i
      w = 0
      for x, location in enumerate(line):
          if location == "#":
              grid[(x,y,z,w)] = "#"
          elif location == ".":
              grid[(x,y,z,w)] = "."

  def neighbors(x, y, z, w, grid):
      n = 0
      for i in range(x-1, x+2):
          for j in range(y-1, y+2):
              for k in range(z-1, z+2):
                  for l in range(w-1, w+2):
                      if not (x == i and y == j and z == k and w == l):
                          if (i,j,k,l) in grid and grid[(i,j,k,l)] == "#":
                              n += 1
      return n

  def step(grid):
      numbered_grid = {}
      minx, maxx = 0, 0
      miny, maxy = 0, 0
      minz, maxz = 0, 0
      minw, maxw = 0, 0
      for x, y, z, w in grid:
          if x > maxx:
              maxx = x
          if x < minx:
              minx = x
          if y > maxy:
              maxy = y
          if y < miny:
              miny = y
          if z > maxz:
              maxz = z
          if z < minz:
              minz = z
          if w > maxw:
              maxw = w
          if w < minw:
              minw = w
          numbered_grid[(x,y,z,w)] = neighbors(x,y,z,w, grid)

      for i in range(minx-1, maxx+2):
          for j in range(miny-1, maxy+2):
              for k in range(minz-1, maxz+2):
                  for l in range(minw-1, maxw+2):
                      numbered_grid[(i,j,k,l)] = neighbors(i,j,k,l, grid)

      next_grid = {}
      for (x, y, z, w), n in numbered_grid.items():
          if n in (2, 3) and (x,y,z,w) in grid and grid[(x,y,z,w)] == "#":
              next_grid[(x,y,z,w)] = "#"
          elif n == 3 and ((x,y,z,w) not in grid or grid[(x,y,z,w)] == "."):
              next_grid[(x,y,z,w)] = "#"
          else:
              next_grid[(x,y,z,w)] = "."

      return next_grid

  for i in range(6):
      grid = step(grid)

  count = 0
  for location in grid:
      if grid[location] == "#":
          count += 1

  print(count)
#+end_src

#+RESULTS:
: 1816
