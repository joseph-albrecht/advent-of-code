#+TITLE: Advent of Code 2015

* Day 1
** part 1
Santa was hoping for a white Christmas, but his weather machine's
"snow" function is powered by stars, and he's fresh out! To save
Christmas, he needs you to collect fifty stars by December 25th.

Collect stars by helping Santa solve puzzles. Two puzzles will be made
available on each day in the Advent calendar; the second puzzle is
unlocked when you complete the first. Each puzzle grants one
star. Good luck!

Here's an easy puzzle to warm you up.

Santa is trying to deliver presents in a large apartment building, but
he can't find the right floor - the directions he got are a little
confusing. He starts on the ground floor (floor 0) and then follows
the instructions one character at a time.

An opening parenthesis, (, means he should go up one floor, and a
closing parenthesis, ), means he should go down one floor.

The apartment building is very tall, and the basement is very deep; he
will never find the top or bottom floors.

For example:
#+begin_quote
(()) and ()() both result in floor 0.
((( and (()(()( both result in floor 3.
))((((( also results in floor 3.
()) and ))( both result in floor -1 (the first basement level).
))) and )())()) both result in floor -3.
#+end_quote

To what floor do the instructions take Santa?

#+begin_src python :results output
  instructions = open("inputs/2015-Day1", 'r').read()
  floor = 0
  for char in instructions:
      if char == '(':
          floor += 1
      elif char == ')':
          floor -= 1

  print(floor)
#+end_src

#+RESULTS:
: 138

** part 2
Now, given the same instructions, find the position of the first
character that causes him to enter the basement (floor -1). The first
character in the instructions has position 1, the second character has
position 2, and so on.

For example:
#+begin_quote
) causes him to enter the basement at character position 1.
()()) causes him to enter the basement at character position 5.
#+end_quote

What is the position of the character that causes Santa to first enter
the basement?

#+begin_src python :results output
  instructions = open("inputs/2015-Day1", 'r').read()
  floor = 0
  for step, char in enumerate(instructions):
      if char == '(':
          floor += 1
      elif char == ')':
          floor -= 1

      if floor < 0:
          print(step + 1)
          break
#+end_src

#+RESULTS:
: 1771
* Day 2
** part 1
The elves are running low on wrapping paper, and so they need to
submit an order for more. They have a list of the dimensions (length
l, width w, and height h) of each present, and only want to order
exactly as much as they need.

Fortunately, every present is a box (a perfect right rectangular
prism), which makes calculating the required wrapping paper for each
gift a little easier: find the surface area of the box, which is
2*l*w + 2*w*h + 2*h*l. The elves also need a little extra paper for
each present: the area of the smallest side.

For example:
#+begin_quote
A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52 square
feet of wrapping paper plus 6 square feet of slack, for a total of 58
square feet.  A present with dimensions 1x1x10 requires 2*1 + 2*10 +
2*10 = 42 square feet of wrapping paper plus 1 square foot of slack,
for a total of 43 square feet.  All numbers in the elves' list are in
feet.
#+end_quote

How many total square feet of wrapping paper should they order?

#+begin_src python :results output
  sizes = open("inputs/2015-Day2", 'r').read().split('\n')

  total_paper = 0
  for size in sizes:
      l, w, h = map(lambda x: int(x), size.split('x'))
      lp = 2*l*w
      lw = 2*w*h
      lh = 2*h*l

      paper = lp + lw + lh + sorted([l*w, w*h, h*l])[0]
      total_paper += paper

  print(total_paper)
#+end_src

#+RESULTS:
: 1598415

** part 2
The elves are also running low on ribbon. Ribbon is all the same
width, so they only have to worry about the length they need to order,
which they would again like to be exact.

The ribbon required to wrap a present is the shortest distance around
its sides, or the smallest perimeter of any one face. Each present
also requires a bow made out of ribbon as well; the feet of ribbon
required for the perfect bow is equal to the cubic feet of volume of
the present. Don't ask how they tie the bow, though; they'll never
tell.

For example:
#+begin_quote
A present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon
to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for a
total of 34 feet.  A present with dimensions 1x1x10 requires 1+1+1+1 =
4 feet of ribbon to wrap the present plus 1*1*10 = 10 feet of ribbon
for the bow, for a total of 14 feet.
#+end_quote

How many total feet of ribbon should they order?

#+begin_src python :results output
  sizes = open("inputs/2015-Day2", 'r').read().split('\n')
  total_ribbon = 0
  for size in sizes:
      l, w, h = map(lambda x: int(x), size.split('x'))
      lp = l+l+w+w
      lw = w+w+h+h
      lh = h+h+l+l

      v = l*w*h
      ribbon = v + sorted([lp, lw, lh])[0]
      total_ribbon += ribbon

  print(total_ribbon)
#+end_src

#+RESULTS:
: 3812909

* Day 3
** part 1
Santa is delivering presents to an infinite two-dimensional grid of
houses.

He begins by delivering a present to the house at his starting
location, and then an elf at the North Pole calls him via radio and
tells him where to move next. Moves are always exactly one house to
the north (^), south (v), east (>), or west (<). After each move, he
delivers another present to the house at his new location.

However, the elf back at the north pole has had a little too much
eggnog, and so his directions are a little off, and Santa ends up
visiting some houses more than once. How many houses receive at least
one present?

For example:
#+begin_quote
> delivers presents to 2 houses: one at the starting location, and one
to the east.

^>v< delivers presents to 4 houses in a square, including twice to the
house at his starting/ending location.

^v^v^v^v^v delivers a bunch of presents to some very lucky children at
only 2 houses.
#+end_quote
#+begin_src python :results output
  moves = open("inputs/2015-Day3", 'r').read()
  x, y = 0, 0
  visits = [(x, y)]
  for move in moves:
      if move == '^':
          x += 1
      elif move == 'v':
          x -= 1
      elif move == '>':
          y += 1
      elif move == '<':
          y -= 1

      if not (x, y) in visits:
          visits.append((x, y))

  print(len(visits))
#+end_src

#+RESULTS:
: 2565
** part 2
The next year, to speed up the process, Santa creates a robot version
of himself, Robo-Santa, to deliver presents with him.

Santa and Robo-Santa start at the same location (delivering two
presents to the same starting house), then take turns moving based on
instructions from the elf, who is eggnoggedly reading from the same
script as the previous year.

This year, how many houses receive at least one present?

For example:

#+begin_quote
^v delivers presents to 3 houses, because Santa goes north, and then
Robo-Santa goes south.

^>v< now delivers presents to 3 houses, and Santa and Robo-Santa end
up back where they started.

^v^v^v^v^v now delivers presents to 11 houses, with Santa going one
direction and Robo-Santa going the other.
#+end_quote

#+begin_src python :results output
  moves = open("inputs/2015-Day3", 'r').read()
  sx, sy = 0, 0
  rx, ry = 0, 0
  visits = [(sx, sy)]
  for step, move in enumerate(moves):
      if step % 2 == 0:
          if move == '^':
              sx += 1
          elif move == 'v':
              sx -= 1
          elif move == '>':
              sy += 1
          elif move == '<':
              sy -= 1
      else:
          if move == '^':
              rx += 1
          elif move == 'v':
              rx -= 1
          elif move == '>':
              ry += 1
          elif move == '<':
              ry -= 1
        
      if not (sx, sy) in visits:
          visits.append((sx, sy))
      if not (rx, ry) in visits:
          visits.append((rx, ry))

  print(len(visits))
#+end_src

#+RESULTS:
: 2639

* Day 4
** part 1
Santa needs help mining some AdventCoins (very similar to bitcoins) to
use as gifts for all the economically forward-thinking little girls
and boys.

To do this, he needs to find MD5 hashes which, in hexadecimal, start
with at least five zeroes. The input to the MD5 hash is some secret
key (your puzzle input, given below) followed by a number in
decimal. To mine AdventCoins, you must find Santa the lowest positive
number (no leading zeroes: 1, 2, 3, ...) that produces such a hash.

For example:

#+begin_quote
If your secret key is abcdef, the answer is 609043, because the MD5
hash of abcdef609043 starts with five zeroes (000001dbbfa...), and it
is the lowest such number to do so.

If your secret key is pqrstuv, the lowest number it combines with to
make an MD5 hash starting with five zeroes is 1048970; that is, the
MD5 hash of pqrstuv1048970 looks like 000006136ef....
#+end_quote

#+begin_src python :results output
  import hashlib
  def keycheck(key):
      return hashlib.md5(b"bgvyzdsv"+key).hexdigest()[0:5] == "00000"

  for key in range(0,2000000):
      if keycheck(bytes(str(key), 'utf-8')):
          print(key)
          break
  print()
#+end_src

#+RESULTS:
: 254575
: 

** part 2
Now find one that starts with six zeroes.

#+begin_src python :results output
  import hashlib
  def keycheck(key):
      return hashlib.md5(b"bgvyzdsv"+key).hexdigest()[0:6] == "000000"

  for key in range(0,10000000):
      if keycheck(bytes(str(key), 'utf-8')):
          print(key)
          break
  print()
#+end_src

#+RESULTS:
: 1038736
: 
* Day 5
** part 1
Santa needs help figuring out which strings in his text file are naughty or nice.

A nice string is one with all of the following properties:

It contains at least three vowels (aeiou only), like aei, xazegov, or
aeiouaeiouaeiou.  It contains at least one letter that appears twice
in a row, like xx, abcdde (dd), or aabbccdd (aa, bb, cc, or dd).  It
does not contain the strings ab, cd, pq, or xy, even if they are part
of one of the other requirements.

For example:

#+begin_quote
ugknbfddgicrmopn is nice because it has at least three vowels (u...i...o...), a double letter (...dd...), and none of the disallowed substrings.
aaa is nice because it has at least three vowels and a double letter, even though the letters used by different rules overlap.
jchzalrnumimnmhp is naughty because it has no double letter.
haegwjzuvuyypxyu is naughty because it contains the string xy.
dvszwmarrgswjxmb is naughty because it contains only one vowel.
#+end_quote

How many strings are nice?

#+begin_src python :results output
  def has_three_vowels(string):
      vowels = 'aeiou'
      count = 0
      for vowel in vowels:
          count += string.count(vowel)

      return count >= 3

  def no_bad_pairs(string):
      bad_pairs = ['ab', 'cd', 'pq', 'xy']
      for pair in bad_pairs:
          if pair in string:
              return False
      return True

  def has_doubled_letter(string):
      for pos in range(len(string)-1):
          if string[pos] == string[pos+1]:
              return True
      return False

  strings = open("inputs/2015-Day5", 'r').read().split("\n")

  good_strings = 0
  for string in strings:
      if has_three_vowels(string) and \
         no_bad_pairs(string) and \
         has_doubled_letter(string):
          good_strings += 1

  print(good_strings)
#+end_src

#+RESULTS:
: 236

** part 2
Realizing the error of his ways, Santa has switched to a better model
of determining whether a string is naughty or nice. None of the old
rules apply, as they are all clearly ridiculous.

Now, a nice string is one with all of the following properties:

It contains a pair of any two letters that appears at least twice in
the string without overlapping, like xyxy (xy) or aabcdefgaa (aa), but
not like aaa (aa, but it overlaps).  It contains at least one letter
which repeats with exactly one letter between them, like xyx,
abcdefeghi (efe), or even aaa.

For example:

#+begin_quote
qjhvhtzxzqqjkmpb is nice because is has a pair that appears twice (qj) and a letter that repeats with exactly one letter between them (zxz).
xxyxx is nice because it has a pair that appears twice and a letter that repeats with one between, even though the letters used by each rule overlap.
uurcxstgmygtbstg is naughty because it has a pair (tg) but no repeat with a single letter between them.
ieodomkazucvgmuy is naughty because it has a repeating letter with one between (odo), but no pair that appears twice.
#+end_quote

How many strings are nice under these new rules?

#+begin_src python :results output
  from itertools import combinations
  def repeated_pair(string):
    comparisons = combinations(range(len(string) - 1), 2)

    for one, two in comparisons:
      if string[one:one+2] == string[two:two+2] and \
         one != two:
        if abs(two - one) > 1:
          return True
    return False

  def has_doubled_letter(string):
    for pos in range(len(string)-2):
      if string[pos] == string[pos+2]:
        return True
    return False

  def good_string(string):
    if repeated_pair(string) and \
       has_doubled_letter(string):
      return True
    return False
  strings = open("inputs/2015-Day5", 'r').read().split("\n")

  good_strings = 0
  for string in strings:
    if good_string(string):
      good_strings += 1

  print(good_strings)
#+end_src

#+RESULTS:
: 51

* Day 6
** part 1
Because your neighbors keep defeating you in the holiday house
decorating contest year after year, you've decided to deploy one
million lights in a 1000x1000 grid.

Furthermore, because you've been especially nice this year, Santa has
mailed you instructions on how to display the ideal lighting
configuration.

Lights in your grid are numbered from 0 to 999 in each direction; the
lights at each corner are at 0,0, 0,999, 999,999, and 999,0. The
instructions include whether to turn on, turn off, or toggle various
inclusive ranges given as coordinate pairs. Each coordinate pair
represents opposite corners of a rectangle, inclusive; a coordinate
pair like 0,0 through 2,2 therefore refers to 9 lights in a 3x3
square. The lights all start turned off.

To defeat your neighbors this year, all you have to do is set up your
lights by doing the instructions Santa sent you in order.

For example:

#+begin_quote
turn on 0,0 through 999,999 would turn on (or leave on) every light.

toggle 0,0 through 999,0 would toggle the first line of 1000 lights,
turning off the ones that were on, and turning on the ones that were
off.

turn off 499,499 through 500,500 would turn off (or leave off) the
middle four lights.
#+end_quote

After following the instructions, how many lights are lit?

#+begin_src python :results output
  width = 1000
  height = 1000
  grid = []
  for x in range(width):
      grid.append([-1] * height)

  def perform_action(action, start, end, grid):
      for x in range(start[0], end[0] + 1, 1):
          for y in range(start[1], end[1] + 1, 1):
              if action == "toggle":
                  grid[x][y] *= -1
              if action == "off":
                  grid[x][y] = -1
              elif action == "on":
                  grid[x][y] = 1

  steps = open("inputs/2015-Day6", 'r').read().split("\n")
  #steps = ["toggle 0,0 through 9,0"]
  for step in steps:
      parts = step.split(" ")
      start = list(map(lambda x: int(x), parts[-3].split(",")))
      end = list(map(lambda x: int(x), parts[-1].split(",")))
      action = None
      if len(parts) == 4:
          action = "toggle"
      else:
          action = parts[1]
      perform_action(action, start, end, grid)

  on_lights = 0
  for x in range(width):
      for y in range(height):
          if grid[x][y] == 1:
              on_lights += 1

  print(on_lights)
#+end_src

#+RESULTS:
: 543903

** part 2
You just finish implementing your winning light pattern when you
realize you mistranslated Santa's message from Ancient Nordic Elvish.

The light grid you bought actually has individual brightness controls;
each light can have a brightness of zero or more. The lights all start
at zero.

The phrase turn on actually means that you should increase the
brightness of those lights by 1.

The phrase turn off actually means that you should decrease the
brightness of those lights by 1, to a minimum of zero.

The phrase toggle actually means that you should increase the
brightness of those lights by 2.

What is the total brightness of all lights combined after following
Santa's instructions?

For example:

turn on 0,0 through 0,0 would increase the total brightness by 1.
toggle 0,0 through 999,999 would increase the total brightness by 2000000.

#+begin_src python :results output
  width = 1000
  height = 1000
  grid = []
  for x in range(width):
      grid.append([0] * height)

  def perform_action(action, start, end, grid):
      for x in range(start[0], end[0] + 1, 1):
          for y in range(start[1], end[1] + 1, 1):
              if action == "toggle":
                  grid[x][y] += 2
              if action == "off":
                  if grid[x][y] > 0:
                      grid[x][y] += -1
              elif action == "on":
                  grid[x][y] += 1

  steps = open("inputs/2015-Day6", 'r').read().split("\n")
  #steps = ["toggle 0,0 through 9,0"]
  for step in steps:
      parts = step.split(" ")
      start = list(map(lambda x: int(x), parts[-3].split(",")))
      end = list(map(lambda x: int(x), parts[-1].split(",")))
      action = None
      if len(parts) == 4:
          action = "toggle"
      else:
          action = parts[1]
      perform_action(action, start, end, grid)

  on_lights = 0
  for x in range(width):
      for y in range(height):
          on_lights += grid[x][y]

  print(on_lights)
#+end_src

#+RESULTS:
: 14687245

* Day 7
** part 1
This year, Santa brought little Bobby Tables a set of wires and
bitwise logic gates! Unfortunately, little Bobby is a little under the
recommended age range, and he needs help assembling the circuit.

Each wire has an identifier (some lowercase letters) and can carry a
16-bit signal (a number from 0 to 65535). A signal is provided to each
wire by a gate, another wire, or some specific value. Each wire can
only get a signal from one source, but can provide its signal to
multiple destinations. A gate provides no signal until all of its
inputs have a signal.

The included instructions booklet describes how to connect the parts
together: x AND y -> z means to connect wires x and y to an AND gate,
and then connect its output to wire z.

For example:

#+begin_quote
123 -> x means that the signal 123 is provided to wire x.

x AND y -> z means that the bitwise AND of wire x and wire y is
provided to wire z.

p LSHIFT 2 -> q means that the value from wire p is left-shifted by 2
and then provided to wire q.

NOT e -> f means that the bitwise complement of the value from wire e
is provided to wire f.

Other possible gates include OR (bitwise OR) and RSHIFT
(right-shift). If, for some reason, you'd like to emulate the circuit
instead, almost all programming languages (for example, C, JavaScript,
or Python) provide operators for these gates.
#+end_quote

For example, here is a simple circuit:

#+begin_quote
123 -> x
456 -> y
x AND y -> d
x OR y -> e
x LSHIFT 2 -> f
y RSHIFT 2 -> g
NOT x -> h
NOT y -> i
#+end_quote

After it is run, these are the signals on the wires:

#+begin_quote
d: 72
e: 507
f: 492
g: 114
h: 65412
i: 65079
x: 123
y: 456
#+end_quote

In little Bobby's kit's instructions booklet (provided as your puzzle
input), what signal is ultimately provided to wire a?

#+begin_src python :results output
  import functools

  descriptions = open("inputs/2015-Day7", 'r').read().split("\n")
  gates = {}
  for description in descriptions:
      gate, out = description.split(" -> ")
      gates[out.strip()] = gate

  @functools.lru_cache()
  def calculate(instruction):
      try:
          return int(instruction)
      except ValueError:
          pass
    
      parts = gates[instruction].split(" ")

      if "NOT" in parts:
          return ~calculate(parts[1])
      elif "AND" in parts:
          return calculate(parts[0]) & calculate(parts[2])
      elif "OR" in parts:
          return calculate(parts[0]) |  calculate(parts[2])
      elif "LSHIFT" in parts:
          return calculate(parts[0]) <<  calculate(parts[2])
      elif "RSHIFT" in parts:
          return calculate(parts[0]) >>  calculate(parts[2])
      else:
          return calculate(parts[0])

  print(calculate("a"))
#+end_src

#+RESULTS:
: 16076

** part 2
Now, take the signal you got on wire a, override wire b to that
signal, and reset the other wires (including wire a).

What new signal is ultimately provided to wire a?

#+begin_src python :results output
  import functools

  descriptions = open("inputs/2015-Day7", 'r').read().split("\n")
  gates = {}
  for description in descriptions:
      gate, out = description.split(" -> ")
      gates[out.strip()] = gate

  @functools.lru_cache()
  def calculate(instruction):
      try:
          return int(instruction)
      except ValueError:
          pass

      parts = gates[instruction].split(" ")

      if "NOT" in parts:
          return ~calculate(parts[1])
      elif "AND" in parts:
          return calculate(parts[0]) & calculate(parts[2])
      elif "OR" in parts:
          return calculate(parts[0]) |  calculate(parts[2])
      elif "LSHIFT" in parts:
          return calculate(parts[0]) <<  calculate(parts[2])
      elif "RSHIFT" in parts:
          return calculate(parts[0]) >>  calculate(parts[2])
      else:
          return calculate(parts[0])

  gates["b"] = str(calculate("a"))
  calculate.cache_clear()
  print(calculate("a"))
#+end_src

#+RESULTS:
: 2797

* Day 8
** part 1
Space on the sleigh is limited this year, and so Santa will be
bringing his list as a digital copy. He needs to know how much space
it will take up when stored.

It is common in many programming languages to provide a way to escape
special characters in strings. For example, C, JavaScript, Perl,
Python, and even PHP handle special characters in very similar ways.

However, it is important to realize the difference between the number
of characters in the code representation of the string literal and the
number of characters in the in-memory string itself.

For example:

#+begin_quote
"" is 2 characters of code (the two double quotes), but the string
contains zero characters.

"abc" is 5 characters of code, but 3 characters in the string data.

"aaa\"aaa" is 10 characters of code, but the string itself contains
six "a" characters and a single, escaped quote character, for a total
of 7 characters in the string data.

"\x27" is 6 characters of code, but the string itself contains just
one - an apostrophe ('), escaped using hexadecimal notation.
#+end_quote

Santa's list is a file that contains many double-quoted string
literals, one on each line. The only escape sequences used are
\\ (which represents a single backslash), \" (which represents a lone
double-quote character), and \x plus two hexadecimal characters (which
represents a single character with that ASCII code).

Disregarding the whitespace in the file, what is the number of
characters of code for string literals minus the number of characters
in memory for the values of the strings in total for the entire file?

For example, given the four strings above, the total number of
characters of string code (2 + 5 + 10 + 6 = 23) minus the total number
of characters in memory for string values (0 + 3 + 7 + 1 = 11) is 23 -
11 = 12.

#+begin_src python :results output
  import re
  strings = open("inputs/2015-Day8", 'r').read().split("\n")
  total_chars = 0
  actual_chars = 0

  for string in strings:
      total_chars += len(string)
      actual_chars += len(eval(string))

  print(total_chars)
  print(actual_chars)
  print(total_chars - actual_chars)
#+end_src

** part 2
Now, let's go the other way. In addition to finding the number of
characters of code, you should now encode each code representation as
a new string and find the number of characters of the new encoded
representation, including the surrounding double quotes.

For example:

#+begin_quote
"" encodes to "\"\"", an increase from 2 characters to 6.
"abc" encodes to "\"abc\"", an increase from 5 characters to 9.
"aaa\"aaa" encodes to "\"aaa\\\"aaa\"", an increase from 10 characters to 16.
"\x27" encodes to "\"\\x27\"", an increase from 6 characters to 11.
#+end_quote

Your task is to find the total number of characters to represent the
newly encoded strings minus the number of characters of code in each
original string literal. For example, for the strings above, the total
encoded length (6 + 9 + 16 + 11 = 42) minus the characters in the
original code representation (23, just like in the first part of this
puzzle) is 42 - 23 = 19.

#+begin_src python :results output

#+end_src

* Day 9
** part 1
Every year, Santa manages to deliver all of his presents in a single
night.

This year, however, he has some new locations to visit; his elves have
provided him the distances between every pair of locations. He can
start and end at any two (different) locations he wants, but he must
visit each location exactly once. What is the shortest distance he can
travel to achieve this?

For example, given the following distances:

#+begin_quote
London to Dublin = 464
London to Belfast = 518
Dublin to Belfast = 141
The possible routes are therefore:

Dublin -> London -> Belfast = 982
London -> Dublin -> Belfast = 605
London -> Belfast -> Dublin = 659
Dublin -> Belfast -> London = 659
Belfast -> Dublin -> London = 605
Belfast -> London -> Dublin = 982
#+end_quote

The shortest of these is London -> Dublin -> Belfast = 605, and so the
answer is 605 in this example.

What is the distance of the shortest route?

#+begin_src python :results output
  import itertools
  distance_list = open("inputs/2015-Day9", 'r').read().split("\n")

  distances = {}

  for distance in distance_list:
      parts = distance.split(" ")
      start = parts[0]
      end = parts[2]
      dist = parts[4]
      if start not in distances:
          distances[start] = {}
      if end not in distances:
          distances[end] = {}

      distances[start][end] = int(dist)
      distances[end][start] = int(dist)

  paths = itertools.permutations(distances.keys(), len(distances))
  path_distances = []
  for path in paths:
      distance = 0
      for start, end in zip(path[:-1], path[1:]):
          distance += distances[start][end]
      path_distances.append(distance)
  print(min(path_distances))
#+end_src

#+RESULTS:
: 117

** part 2
The next year, just to show off, Santa decides to take the route with
the longest distance instead.

He can still start and end at any two (different) locations he wants,
and he still must visit each location exactly once.

For example, given the distances above, the longest route would be 982
via (for example) Dublin -> London -> Belfast.

What is the distance of the longest route?

#+begin_src python :results output
  import itertools
  distance_list = open("inputs/2015-Day9", 'r').read().split("\n")

  distances = {}

  for distance in distance_list:
      parts = distance.split(" ")
      start = parts[0]
      end = parts[2]
      dist = parts[4]
      if start not in distances:
          distances[start] = {}
      if end not in distances:
          distances[end] = {}

      distances[start][end] = int(dist)
      distances[end][start] = int(dist)

  paths = itertools.permutations(distances.keys(), len(distances))
  path_distances = []
  for path in paths:
      distance = 0
      for start, end in zip(path[:-1], path[1:]):
          distance += distances[start][end]
      path_distances.append(distance)
  print(max(path_distances))
#+end_src

#+RESULTS:
: 909

* Day 10
** part 1
Today, the Elves are playing a game called look-and-say. They take
turns making sequences by reading aloud the previous sequence and
using that reading as the next sequence. For example, 211 is read as
"one two, two ones", which becomes 1221 (1 2, 2 1s).

Look-and-say sequences are generated iteratively, using the previous
value as input for the next step. For each step, take the previous
value, and replace each run of digits (like 111) with the number of
digits (3) followed by the digit itself (1).

For example:

#+begin_quote
1 becomes 11 (1 copy of digit 1).
11 becomes 21 (2 copies of digit 1).
21 becomes 1211 (one 2 followed by one 1).
1211 becomes 111221 (one 1, one 2, and two 1s).
111221 becomes 312211 (three 1s, two 2s, and one 1).
#+end_quote

Starting with the digits in your puzzle input, apply this process 40
times. What is the length of the result?

Your puzzle input is 1113122113.

#+begin_src python :results output
  def look_and_say(sequence):
      segments = [[sequence[0], 1]]
      for char in sequence[1:]:
          if char == segments[-1][0]:
              segments[-1][1] += 1
          else:
              segments.append([char, 1])

      new_sequence = ""
      for segment in segments:
          new_sequence += str(segment[1]) + segment[0]

      return new_sequence

  sequence = "1113122113"
  for iteration in range(40):
      sequence = look_and_say(sequence)

  print(len(sequence))
#+end_src

#+RESULTS:
: 360154

** part 2
Neat, right? You might also enjoy hearing John Conway talking about
this sequence (that's Conway of Conway's Game of Life fame).

Now, starting again with the digits in your puzzle input, apply this
process 50 times. What is the length of the new result?

#+begin_src python :results output
  def look_and_say(sequence):
      segments = [[sequence[0], 1]]
      for char in sequence[1:]:
          if char == segments[-1][0]:
              segments[-1][1] += 1
          else:
              segments.append([char, 1])

      new_sequence = ""
      for segment in segments:
          new_sequence += str(segment[1]) + segment[0]

      return new_sequence

  sequence = "1113122113"
  for iteration in range(50):
      sequence = look_and_say(sequence)

  print(len(sequence))
#+end_src

* Day 11
** part 1
Santa's previous password expired, and he needs help choosing a new
one.

To help him remember his new password after the old one expires, Santa
has devised a method of coming up with a password based on the
previous one. Corporate policy dictates that passwords must be exactly
eight lowercase letters (for security reasons), so he finds his new
password by incrementing his old password string repeatedly until it
is valid.

Incrementing is just like counting with numbers: xx, xy, xz, ya, yb,
and so on. Increase the rightmost letter one step; if it was z, it
wraps around to a, and repeat with the next letter to the left until
one doesn't wrap around.

Unfortunately for Santa, a new Security-Elf recently started, and he
has imposed some additional password requirements:

- Passwords must include one increasing straight of at least three
  letters, like abc, bcd, cde, and so on, up to xyz. They cannot skip
  letters; abd doesn't count.
- Passwords may not contain the letters i, o, or l, as these letters
  can be mistaken for other characters and are therefore confusing.
- Passwords must contain at least two different, non-overlapping pairs
  of letters, like aa, bb, or zz.

For example:

- hijklmmn meets the first requirement (because it contains the
  straight hij) but fails the second requirement requirement (because
  it contains i and l).
- abbceffg meets the third requirement (because it repeats bb and ff)
  but fails the first requirement.
- abbcegjk fails the third requirement, because it only has one double
  letter (bb).
- The next password after abcdefgh is abcdffaa.
- The next password after ghijklmn is ghjaabcc, because you eventually
  skip all the passwords that start with ghi..., since i is not
  allowed.

Given Santa's current password (your puzzle input), what should his
next password be?

input ~cqjxjnds~

#+begin_src python :results output
  letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

  def increment(string):
      last_letter = string[-1]
      if last_letter == 'z':
          return increment(string[:-1]) + 'a'
      else:
          next_letter = letters[letters.index(last_letter) + 1]
          return string[:-1] + next_letter

  def has_increase(string):
      sequence = list(map(lambda x: letters.index(x), string))

      for num in range(len(string)-2):
          if sequence[num+2] - sequence[num+1] == 1 and \
             sequence[num+1] - sequence[num] == 1:
              return True

      return False

  def has_pairs(string):
      pairs = []
      for one, two in zip(string[:-1], string[1:]):
          if one == two:
              if len(pairs) > 0:
                  if one not in pairs[0] and two not in pairs[0]:
                      return True
              pairs.append((one, two))

      return False

  def no_confuse(string):
      return 'i' not in string and \
             'l' not in string and \
             'o' not in string

  password = "cqjxjnds"
  for iteration in range(1000000):
      password = increment(password)
      if has_increase(password) and \
         has_pairs(password) and \
         no_confuse(password):
          print("found")
          break

  print(password)
    
#+end_src

** part 2
Santa's password expired again. What's the next one?

#+begin_src python :results output
  letters = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

  def increment(string):
      last_letter = string[-1]
      if last_letter == 'z':
          return increment(string[:-1]) + 'a'
      else:
          next_letter = letters[letters.index(last_letter) + 1]
          return string[:-1] + next_letter

  def has_increase(string):
      sequence = list(map(lambda x: letters.index(x), string))

      for num in range(len(string)-2):
          if sequence[num+2] - sequence[num+1] == 1 and \
             sequence[num+1] - sequence[num] == 1:
              return True

      return False

  def has_pairs(string):
      pairs = []
      for one, two in zip(string[:-1], string[1:]):
          if one == two:
              if len(pairs) > 0:
                  if one not in pairs[0] and two not in pairs[0]:
                      return True
              pairs.append((one, two))

      return False

  def no_confuse(string):
      return 'i' not in string and \
             'l' not in string and \
             'o' not in string

  password = "cqjxxyzz"
  for iteration in range(1000000):
      password = increment(password)
      if has_increase(password) and \
         has_pairs(password) and \
         no_confuse(password):
          print("found")
          break

  print(password)
#+end_src

#+RESULTS:
: found
: cqkaabcc

* Day 12
** part 1
Santa's Accounting-Elves need help balancing the books after a recent
order. Unfortunately, their accounting software uses a peculiar
storage format. That's where you come in.

They have a JSON document which contains a variety of things: arrays
([1,2,3]), objects ({"a":1, "b":2}), numbers, and strings. Your first
job is to simply find all of the numbers throughout the document and
add them together.

For example:

#+begin_quote
[1,2,3] and {"a":2,"b":4} both have a sum of 6.
[[[3]]] and {"a":{"b":4},"c":-1} both have a sum of 3.
{"a":[-1,1]} and [-1,{"a":1}] both have a sum of 0.
[] and {} both have a sum of 0.
#+end_quote
You will not encounter any strings containing numbers.

What is the sum of all numbers in the document?

#+begin_src python :results output
  import re
  books = open("inputs/2015-Day12", 'r').read()

  books = re.sub("[a-zA-z{},.:\"]", " ", books)
  print(books)
  books = re.sub(" +", " ", books).strip()
  print(books)
  numbers = map(lambda x: int(x), books.split(" "))
  print(sum(numbers))
#+end_src

** part 2
Uh oh - the Accounting-Elves have realized that they double-counted
everything red.

Ignore any object (and all of its children) which has any property
with the value "red". Do this only for objects ({...}), not arrays
([...]).

#+begin_quote
- [1,2,3] still has a sum of 6.
- [1,{"c":"red","b":2},3] now has a sum of 4, because the middle
  object is ignored.
- {"d":"red","e":[1,2,3,4],"f":5} now has a sum of 0, because the
  entire structure is ignored.
- [1,"red",5] has a sum of 6, because "red" in an array has no effect.
#+end_quote

found [[https://old.reddit.com/r/adventofcode/comments/3wh73d/day_12_solutions/cxw7oz1/][reddit user's solution]]
#+begin_src python :results output
  from json import loads
  books = open("inputs/2015-Day12", 'r').read()

  def value(obj):
      if type(obj) == int:
          return obj
      if type(obj) == list:
          return sum([value(o) for o in obj])
      if type(obj) != dict:
          return 0
      if 'red' in obj.values():
          return 0
      return value(list(obj.values()))

  print(value(loads(books)))
#+end_src

#+RESULTS:
: 68466

* Day 13
** part 1
In years past, the holiday feast with your family hasn't gone so
well. Not everyone gets along! This year, you resolve, will be
different. You're going to find the optimal seating arrangement and
avoid all those awkward conversations.

You start by writing up a list of everyone invited and the amount
their happiness would increase or decrease if they were to find
themselves sitting next to each other person. You have a circular
table that will be just big enough to fit everyone comfortably, and so
each person will have exactly two neighbors.

For example, suppose you have only four attendees planned, and you
calculate their potential happiness as follows:

Alice would gain 54 happiness units by sitting next to Bob.
Alice would lose 79 happiness units by sitting next to Carol.
Alice would lose 2 happiness units by sitting next to David.
Bob would gain 83 happiness units by sitting next to Alice.
Bob would lose 7 happiness units by sitting next to Carol.
Bob would lose 63 happiness units by sitting next to David.
Carol would lose 62 happiness units by sitting next to Alice.
Carol would gain 60 happiness units by sitting next to Bob.
Carol would gain 55 happiness units by sitting next to David.
David would gain 46 happiness units by sitting next to Alice.
David would lose 7 happiness units by sitting next to Bob.
David would gain 41 happiness units by sitting next to Carol.

Then, if you seat Alice next to David, Alice would lose 2 happiness
units (because David talks so much), but David would gain 46 happiness
units (because Alice is such a good listener), for a total change
of 44.

If you continue around the table, you could then seat Bob next to
Alice (Bob gains 83, Alice gains 54). Finally, seat Carol, who sits
next to Bob (Carol gains 60, Bob loses 7) and David (Carol gains 55,
David gains 41). The arrangement looks like this:

     +41 +46
+55   David    -2
Carol       Alice
+60    Bob    +54
     -7  +83

After trying every other seating arrangement in this hypothetical
scenario, you find that this one is the most optimal, with a total
change in happiness of 330.

What is the total change in happiness for the optimal seating
arrangement of the actual guest list?

#+begin_src python :results output
  import itertools
  pref_list = open("inputs/2015-Day13", 'r').read().split("\n")

  prefs = {}
  for pref in pref_list:
      parts = pref.split(" ")
      gl = parts[2]
      desire = int(parts[3])
      subj = parts[0]
      obj = parts[10]

      if gl == "lose":
          desire *= -1

      if not subj in prefs:
          prefs[subj] = {}

      prefs[subj][obj[:-1]] = desire

  arrangements = list(itertools.permutations(prefs.keys(), len(prefs)))

  happiness = []
  num_guests = len(prefs)
  for a in arrangements:
      happiness.append(sum(map(lambda x: prefs[a[x]][a[((x+1) % num_guests)]] + prefs[a[((x+1) % num_guests)]][a[x]], range(len(a)))))

  print(max(happiness))
#+end_src

** part 2
In all the commotion, you realize that you forgot to seat yourself. At
this point, you're pretty apathetic toward the whole thing, and your
happiness wouldn't really go up or down regardless of who you sit next
to. You assume everyone else would be just as ambivalent about sitting
next to you, too.

So, add yourself to the list, and give all happiness relationships
that involve you a score of 0.

What is the total change in happiness for the optimal seating
arrangement that actually includes yourself?

#+begin_src python :results output
  import itertools
  from collections import defaultdict
  pref_list = open("inputs/2015-Day13", 'r').read().split("\n")

  prefs = {}
  for pref in pref_list:
      parts = pref.split(" ")
      gl = parts[2]
      desire = int(parts[3])
      subj = parts[0]
      obj = parts[10]

      if gl == "lose":
          desire *= -1

      if not subj in prefs:
          prefs[subj] = defaultdict(lambda: 0)

      prefs[subj][obj[:-1]] = desire

  prefs["joey"] = defaultdict(lambda: 0)
  arrangements = list(itertools.permutations(prefs.keys(), len(prefs)))

  happiness = []
  num_guests = len(prefs)
  for a in arrangements:
      happiness.append(sum(map(lambda x: prefs[a[x]][a[((x+1) % num_guests)]] + prefs[a[((x+1) % num_guests)]][a[x]], range(len(a)))))

  print(max(happiness))
#+end_src

* Day 14
** part 1
This year is the Reindeer Olympics! Reindeer can fly at high speeds,
but must rest occasionally to recover their energy. Santa would like
to know which of his reindeer is fastest, and so he has them race.

Reindeer can only either be flying (always at their top speed) or
resting (not moving at all), and always spend whole seconds in either
state.

For example, suppose you have the following Reindeer:

#+begin_quote
- Comet can fly 14 km/s for 10 seconds, but then must rest for 127 seconds.
- Dancer can fly 16 km/s for 11 seconds, but then must rest for 162
  seconds.
- After one second, Comet has gone 14 km, while Dancer has gone 16
  km. After ten seconds, Comet has gone 140 km, while Dancer has gone
  160 km. On the eleventh second, Comet begins resting (staying at 140
  km), and Dancer continues on for a total distance of 176 km. On the
  12th second, both reindeer are resting. They continue to rest until
  the 138th second, when Comet flies for another ten seconds. On the
  174th second, Dancer flies for another 11 seconds.

In this example, after the 1000th second, both reindeer are resting,
and Comet is in the lead at 1120 km (poor Dancer has only gotten 1056
km by that point). So, in this situation, Comet would win (if the race
ended at 1000 seconds).
#+end_quote

Given the descriptions of each reindeer (in your puzzle input), after
exactly 2503 seconds, what distance has the winning reindeer traveled?

#+begin_src python :results output
  reindeer_list = open("inputs/2015-Day14", 'r').read().split("\n")

  reindeer_speeds = []

  for r in reindeer_list:
      parts = r.split(" ")
      name = parts[0]
      speed = int(parts[3])
      time = int(parts[6])
      rest = int(parts[-2])

      reindeer = {}
      reindeer['speed'] = speed
      reindeer['time']  = time
      reindeer['rest']  = rest
      reindeer_speeds.append(reindeer)

  def distance(reindeer, time):
      cycle = reindeer['time'] + reindeer['rest']
      iterations = time // cycle

      dist = iterations * reindeer['speed'] * reindeer['time']

      remaining_time = time - (cycle * iterations)
      if remaining_time > reindeer['time']:
          remaining_time = reindeer['time']

      dist += remaining_time * reindeer['speed']
      return dist

  distances = []
  for r in reindeer_speeds:
      distances.append(distance(r, 2503))

  print(max(distances))
#+end_src

** part 2
Seeing how reindeer move in bursts, Santa decides he's not pleased
with the old scoring system.

Instead, at the end of each second, he awards one point to the
reindeer currently in the lead. (If there are multiple reindeer tied
for the lead, they each get one point.) He keeps the traditional 2503
second time limit, of course, as doing otherwise would be entirely
ridiculous.

Given the example reindeer from above, after the first second, Dancer
is in the lead and gets one point. He stays in the lead until several
seconds into Comet's second burst: after the 140th second, Comet pulls
into the lead and gets his first point. Of course, since Dancer had
been in the lead for the 139 seconds before that, he has accumulated
139 points by the 140th second.

After the 1000th second, Dancer has accumulated 689 points, while poor
Comet, our old champion, only has 312. So, with the new scoring
system, Dancer would win (if the race ended at 1000 seconds).

Again given the descriptions of each reindeer (in your puzzle input),
after exactly 2503 seconds, how many points does the winning reindeer
have?

#+begin_src python :results output
  reindeer_list = open("inputs/2015-Day14", 'r').read().split("\n")

  reindeer_speeds = []

  for r in reindeer_list:
      parts = r.split(" ")
      name = parts[0]
      speed = int(parts[3])
      time = int(parts[6])
      rest = int(parts[-2])

      reindeer = {}
      reindeer['name']  = name
      reindeer['speed'] = speed
      reindeer['time']  = time
      reindeer['rest']  = rest
      reindeer_speeds.append(reindeer)
    
  def update_distance(reindeer, time):
      cycle = reindeer['time'] + reindeer['rest']
      iterations = time // cycle

      remaining_time = time - (cycle * iterations)
      if remaining_time >= reindeer['time']:
          return 0

      return reindeer['speed']

  def update_scores():
      high_score = max(distances.values())
      winning = filter(lambda r: high_score == distances[r], scores)
      for r in winning:
          scores[r] += 1
    
  distances = {}
  scores = {}
  for r in reindeer_speeds:
      scores[r['name']] = 0
      distances[r['name']] = 0

  for s in range(2503):
      for r in reindeer_speeds:
          distances[r['name']] += update_distance(r, s)

      update_scores()
  print(scores[max(scores, key=scores.get)])
#+end_src

* Day 15
** part 1
Today, you set out on the task of perfecting your milk-dunking cookie
recipe. All you have to do is find the right balance of ingredients.

Your recipe leaves room for exactly 100 teaspoons of ingredients. You
make a list of the remaining ingredients you could use to finish the
recipe (your puzzle input) and their properties per teaspoon:

- capacity (how well it helps the cookie absorb milk)
- durability (how well it keeps the cookie intact when full of milk)
- flavor (how tasty it makes the cookie)
- texture (how it improves the feel of the cookie)
- calories (how many calories it adds to the cookie)
- You can only measure ingredients in whole-teaspoon amounts
  accurately, and you have to be accurate so you can reproduce your
  results in the future. The total score of a cookie can be found by
  adding up each of the properties (negative totals become 0) and then
  multiplying together everything except calories.

For instance, suppose you have these two ingredients:

- Butterscotch: capacity -1, durability -2, flavor 6, texture 3,
  calories 8
- Cinnamon: capacity 2, durability 3, flavor -2, texture -1, calories
  3
- Then, choosing to use 44 teaspoons of butterscotch and 56 teaspoons
  of cinnamon (because the amounts of each ingredient must add up
  to 100) would result in a cookie with the following properties:

A capacity of 44*-1 + 56*2 = 68
A durability of 44*-2 + 56*3 = 80
A flavor of 44*6 + 56*-2 = 152
A texture of 44*3 + 56*-1 = 76

Multiplying these together (68 * 80 * 152 * 76, ignoring calories for
now) results in a total score of 62842880, which happens to be the
best score possible given these ingredients. If any properties had
produced a negative total, it would have instead become zero, causing
the whole score to multiply to zero.

Given the ingredients in your kitchen and their properties, what is
the total score of the highest-scoring cookie you can make?

#+begin_src python :results output
  data = open("inputs/2015-Day15", 'r').read().split("\n")

  ingredients = {}

  for line in data:
      parts = line.split(" ")
      name = parts[0]
      cap = int(parts[2][:-1])
      dur = int(parts[4][:-1])
      fla = int(parts[6][:-1])
      tex = int(parts[8][:-1])
      cal = int(parts[10])

      ingredients[name] = {'capacity': cap,
                           'durability' : dur,
                           'flavor' : fla,
                           'texture' : tex,
                           'calories' : cal}
  print(ingredients)


#+end_src
